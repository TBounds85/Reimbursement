<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">


<hibernate-configuration>
	
	<session-factory>
		
		<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
		<property name="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
		<property name="hibernate.connection.url"></property>
		<property name="hibernate.connection.username"></property>
		<property name="hibernate.connection.password"></property>
		
		<!-- allows us to see SQL queries in console generated by Hibernate -->
		<property name="show_sql">true</property>
		
		<!-- determines how many connections a single user is allowed to DB. -->
		<property name="hibernate.connection.pool_size">10</property>
		
		<!-- defines how session is handled  -->
		<property name="hibernate.current_session_context_class">thread</property>
		
		<!-- 4 modes are: create, update,create-drop, validate -->
		<!-- create: Hibernate purges existing tables in your DB and create tables from scratch. -->
		<!-- update: Hibernate will connect to existing DB and create from scratch without purging. it will update any entities within our database that are not consistent with mapped java models -->
		<!-- create-drop: Hibernate creates all of tables and then drops them when the application stops running. This is good for testing purposes but not production. -->
		<!-- validate: Hibernate will validate a pre-existing schema. It will make sure that your java models are mapped in a way that is consistent with existing schema. -->
		
		<property name="hibernate.hbm2ddl.auto">validate</property>
		
		<mapping class="com.web.model.LoginVerification"/>
		
	
	</session-factory>
	
</hibernate-configuration>